#!/bin/bash
set -e # Exit immediately if a command exits with a non-zero status.

# ==============================================================================
# Seamless SuiteCRM 8 Deployment Script for AWS EC2 (Private Subnet via ALB)
# ==============================================================================
# This script automates the full deployment of SuiteCRM 8.x on a new Ubuntu 24.04
# EC2 instance. It handles both AWS infrastructure provisioning and the complete
# SuiteCRM software installation, including automated database setup.
#
# Features:
# - Creates public/private subnets, NAT Gateway, Route Tables.
# - Configures Security Groups for secure access.
# - Launches EC2 instance in a private subnet.
# - Sets up Application Load Balancer (ALB), Target Group, and Listener.
# - EC2 user-data automates LAMP stack (Apache, PHP, MariaDB) installation.
# - Automates MariaDB security setup and SuiteCRM database/user creation.
# - Downloads, extracts, and installs SuiteCRM via its CLI.
# - Configures Apache Virtual Host and permissions.
#
# IMPORTANT LIMITATION: Due to persistent build environment issues, this script
# DOES NOT perform Node.js/Yarn/Angular frontend compilation on the EC2 instance.
# It relies on pre-compiled assets included in the SuiteCRM distribution.
# For frontend customization, compile locally and transfer assets.
# ==============================================================================

# --- Configuration Variables ---
# AWS Region where resources will be deployed (e.g., "us-east-1", "ap-south-1")
AWS_REGION="ap-south-1"

# The ID of the EXISTING VPC where all resources will be created.
# This script builds *within* a VPC you specify.
VPC_ID_TO_USE="vpc-02cc2a725bffc71f4" # <--- REPLACE WITH YOUR ACTUAL VPC ID!

# EC2 Instance Type (e.g., "t3.small", "t2.micro")
INSTANCE_TYPE="t3.small"

# Name of an existing EC2 Key Pair in your AWS account.
# Used for SSH access to the EC2 instance.
KEY_PAIR_NAME="suiteCRM" # <--- REPLACE WITH YOUR ACTUAL KEY PAIR NAME!

# The application port on the EC2 instance (SuiteCRM uses HTTP 80 by default)
APP_PORT="80"

# A unique prefix for all AWS resources created by this script.
# CHANGE THIS FOR EACH NEW DEPLOYMENT to avoid naming conflicts.
RESOURCE_NAME_PREFIX="suitecrm-jafar-app" # <--- CHANGE THIS FOR NEW DEPLOYMENTS!

# --- SuiteCRM Specific Credentials (Generated by script, RECORD THEM from final output) ---
# MariaDB Root Password (used for 'mysql_secure_installation')
MARIADB_ROOT_PASSWORD="DbR00t!P@ss_N3w_XmMr" # New password for this deployment

# SuiteCRM Application Database Credentials
SUITECRM_DB_NAME="suitecrm_db_jafar_app"
SUITECRM_DB_USER="suitecrm_jafar_user"
SUITECRM_DB_PASSWORD="J@fAr$Db_P@ss_N3w!" # New password for this deployment

# SuiteCRM Application Admin Credentials (for logging into the SuiteCRM web interface)
SUITECRM_ADMIN_USER="jafar"
SUITECRM_ADMIN_PASSWORD="J@fAr_Adm1n#P@ss" # New password for this deployment

# --- SuiteCRM Application Details ---
SUITECRM_VERSION="8.8.0"
SUITECRM_ZIP_URL="https://github.com/salesagility/SuiteCRM-Core/releases/download/v${SUITECRM_VERSION}/SuiteCRM-${SUITECRM_VERSION}.zip"
SUITECRM_ZIP_FILENAME="SuiteCRM-${SUITECRM_VERSION}.zip"
SUITECRM_INSTALL_PATH="/var/www/html/suitecrm"
WEB_SERVER_USER="www-data" # Default Apache user on Ubuntu

echo "--- Starting Seamless SuiteCRM ${SUITECRM_VERSION} Deployment ---"
echo "Resource Prefix: $RESOURCE_NAME_PREFIX"
echo "----------------------------------------------------"

# Validate VPC ID
if [ -z "$VPC_ID_TO_USE" ]; then
    echo "ERROR: VPC_ID_TO_USE is not set. Please configure it in the script."
    exit 1
fi
aws ec2 describe-vpcs --vpc-ids "$VPC_ID_TO_USE" --query "Vpcs[0].VpcId" --output text > /dev/null || \
    { echo "ERROR: VPC ID '$VPC_ID_TO_USE' is invalid or not found in region '$AWS_REGION'. Please check your configuration."; exit 1; }

# Get Availability Zones
AZ1=$(aws ec2 describe-availability-zones --region "$AWS_REGION" --query "AvailabilityZones[0].ZoneName" --output text)
AZ2=$(aws ec2 describe-availability-zones --region "$AWS_REGION" --query "AvailabilityZones[1].ZoneName" --output text)
echo "Using Availability Zones: $AZ1 and $AZ2"

# --- 1. Networking Setup (Subnets, Gateways, Routes) ---
echo "--- [1/6] Setting up Networking (Subnets, Gateways, Routes)... ---"

# Define CIDR blocks for new subnets (ensure they don't overlap with existing VPC CIDRs)
# These are examples; adjust based on your VPC's available CIDR space.
PUBLIC_SUBNET_1_CIDR="172.31.70.0/24"
PUBLIC_SUBNET_2_CIDR="172.31.71.0/24"
PRIVATE_SUBNET_CIDR="172.31.72.0/24"

PUBLIC_SUBNET_1_ID=$(aws ec2 create-subnet --vpc-id "$VPC_ID_TO_USE" --cidr-block "$PUBLIC_SUBNET_1_CIDR" --availability-zone "$AZ1" --query "Subnet.SubnetId" --output text)
aws ec2 create-tags --resources "$PUBLIC_SUBNET_1_ID" --tags Key=Name,Value="${RESOURCE_NAME_PREFIX}-public-subnet-1"
echo "Created Public Subnet 1: $PUBLIC_SUBNET_1_ID in AZ $AZ1 (CIDR: $PUBLIC_SUBNET_1_CIDR)"

PUBLIC_SUBNET_2_ID=$(aws ec2 create-subnet --vpc-id "$VPC_ID_TO_USE" --cidr-block "$PUBLIC_SUBNET_2_CIDR" --availability-zone "$AZ2" --query "Subnet.SubnetId" --output text)
aws ec2 create-tags --resources "$PUBLIC_SUBNET_2_ID" --tags Key=Name,Value="${RESOURCE_NAME_PREFIX}-public-subnet-2"
echo "Created Public Subnet 2: $PUBLIC_SUBNET_2_ID in AZ $AZ2 (CIDR: $PUBLIC_SUBNET_2_CIDR)"

PRIVATE_SUBNET_ID=$(aws ec2 create-subnet --vpc-id "$VPC_ID_TO_USE" --cidr-block "$PRIVATE_SUBNET_CIDR" --availability-zone "$AZ1" --query "Subnet.SubnetId" --output text)
aws ec2 create-tags --resources "$PRIVATE_SUBNET_ID" --tags Key=Name,Value="${RESOURCE_NAME_PREFIX}-private-subnet-1"
echo "Created Private Subnet: $PRIVATE_SUBNET_ID in AZ $AZ1 (CIDR: $PRIVATE_SUBNET_CIDR)"

# Find or Create Internet Gateway (IGW) for the VPC
IGW_ID=$(aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=$VPC_ID_TO_USE" --query "InternetGateways[0].InternetGatewayId" --output text)
if [ -z "$IGW_ID" ]; then
    echo "No Internet Gateway found for VPC $VPC_ID_TO_USE. Creating one..."
    IGW_ID=$(aws ec2 create-internet-gateway --query "InternetGateway.InternetGatewayId" --output text)
    aws ec2 attach-internet-gateway --internet-gateway-id "$IGW_ID" --vpc-id "$VPC_ID_TO_USE"
    aws ec2 create-tags --resources "$IGW_ID" --tags Key=Name,Value="${RESOURCE_NAME_PREFIX}-igw"
    echo "Created and Attached Internet Gateway: $IGW_ID"
else
    echo "Found existing Internet Gateway: $IGW_ID"
fi

# Create Public Route Table and associate with public subnets
PUBLIC_ROUTE_TABLE_ID=$(aws ec2 create-route-table --vpc-id "$VPC_ID_TO_USE" --query "RouteTable.RouteTableId" --output text)
aws ec2 create-tags --resources "$PUBLIC_ROUTE_TABLE_ID" --tags Key=Name,Value="${RESOURCE_NAME_PREFIX}-public-rtb"
aws ec2 create-route --route-table-id "$PUBLIC_ROUTE_TABLE_ID" --destination-cidr-block 0.0.0.0/0 --gateway-id "$IGW_ID"
aws ec2 associate-route-table --subnet-id "$PUBLIC_SUBNET_1_ID" --route-table-id "$PUBLIC_ROUTE_TABLE_ID"
aws ec2 associate-route-table --subnet-id "$PUBLIC_SUBNET_2_ID" --route-table-id "$PUBLIC_ROUTE_TABLE_ID"
echo "Created Public Route Table and associated with public subnets."

# Create NAT Gateway
EIP_ALLOC_ID=$(aws ec2 allocate-address --domain vpc --query "AllocationId" --output text)
aws ec2 create-tags --resources "$EIP_ALLOC_ID" --tags Key=Name,Value="${RESOURCE_NAME_PREFIX}-nat-eip"
NAT_GW_ID=$(aws ec2 create-nat-gateway --subnet-id "$PUBLIC_SUBNET_1_ID" --allocation-id "$EIP_ALLOC_ID" --query "NatGateway.NatGatewayId" --output text)
aws ec2 create-tags --resources "$NAT_GW_ID" --tags Key=Name,Value="${RESOURCE_NAME_PREFIX}-nat-gw"
echo "Creating NAT Gateway: $NAT_GW_ID. This will take a few minutes..."
aws ec2 wait nat-gateway-available --nat-gateway-ids "$NAT_GW_ID"
echo "NAT Gateway is now available."

# Create Private Route Table and associate with private subnet
PRIVATE_ROUTE_TABLE_ID=$(aws ec2 create-route-table --vpc-id "$VPC_ID_TO_USE" --query "RouteTable.RouteTableId" --output text)
aws ec2 create-tags --resources "$PRIVATE_ROUTE_TABLE_ID" --tags Key=Name,Value="${RESOURCE_NAME_PREFIX}-private-rtb"
aws ec2 create-route --route-table-id "$PRIVATE_ROUTE_TABLE_ID" --destination-cidr-block 0.0.0.0/0 --nat-gateway-id "$NAT_GW_ID"
aws ec2 associate-route-table --subnet-id "$PRIVATE_SUBNET_ID" --route-table-id "$PRIVATE_ROUTE_TABLE_ID"
echo "Created Private Route Table and associated with private subnet."
echo "--- [1/6] Networking setup complete. ---"

# --- 2. Security Group Setup ---
echo "--- [2/6] Setting up Security Groups... ---"
ALB_SG_ID=$(aws ec2 create-security-group --group-name "${RESOURCE_NAME_PREFIX}-alb-sg" --description "Security Group for ALB" --vpc-id "$VPC_ID_TO_USE" --query "GroupId" --output text)
aws ec2 authorize-security-group-ingress --group-id "$ALB_SG_ID" --protocol tcp --port 80 --cidr 0.0.0.0/0
aws ec2 authorize-security-group-ingress --group-id "$ALB_SG_ID" --protocol tcp --port 443 --cidr 0.0.0.0/0 # Optional: for HTTPS
aws ec2 create-tags --resources "$ALB_SG_ID" --tags Key=Name,Value="${RESOURCE_NAME_PREFIX}-alb-sg"
echo "Created ALB Security Group: $ALB_SG_ID"

EC2_SG_ID=$(aws ec2 create-security-group --group-name "${RESOURCE_NAME_PREFIX}-ec2-sg" --description "Security Group for EC2 instances" --vpc-id "$VPC_ID_TO_USE" --query "GroupId" --output text)
aws ec2 authorize-security-group-ingress --group-id "$EC2_SG_ID" --protocol tcp --port "$APP_PORT" --source-group "$ALB_SG_ID"
aws ec2 authorize-security-group-ingress --group-id "$EC2_SG_ID" --protocol tcp --port 22 --cidr 0.0.0.0/0 # Allows SSH from anywhere - tighten in production!
aws ec2 create-tags --resources "$EC2_SG_ID" --tags Key=Name,Value="${RESOURCE_NAME_PREFIX}-ec2-sg"
echo "Created EC2 Security Group: $EC2_SG_ID"
echo "--- [2/6] Security Groups setup complete. ---"

# --- 3. EC2 Instance Launch with User Data for Software Installation ---
echo "--- [3/6] Launching EC2 Instance in private subnet with SuiteCRM user-data... ---"

# Dynamic AMI Lookup for latest Ubuntu 24.04 LTS (Noble Numbat)
AMI_OWNER="099720109477" # Canonical's AWS account ID
AMI_NAME_PATTERN="ubuntu/images/hvm-ssd/ubuntu-noble-24.04-amd64-server-*" # Noble = 24.04
AMI_ID=$(aws ec2 describe-images \
    --owners "$AMI_OWNER" \
    --filters "Name=name,Values=$AMI_NAME_PATTERN" "Name=state,Values=available" \
    --query "sort_by(Images, &CreationDate)[-1].ImageId" --output text)

if [ -z "$AMI_ID" ]; then
    echo "ERROR: Could not find a suitable AMI for Ubuntu 24.04 LTS (Noble Numbat). Please check AMI availability."
    exit 1
fi
echo "Found latest Ubuntu 24.04 LTS AMI: $AMI_ID"

# Construct the User Data script for SuiteCRM software installation
# Pass sensitive data as environment variables within the user-data script itself.
read -r -d '' USER_DATA_SCRIPT <<EOF_USER_DATA
#!/bin/bash
set -e # Exit immediately if a command exits with a non-zero status within user-data

# Set environment variables for the script
export SUITECRM_ALB_DNS_NAME="${ALB_DNS_NAME}"
export SUITECRM_MARIADB_ROOT_PASSWORD="${MARIADB_ROOT_PASSWORD}"
export SUITECRM_DB_NAME="${SUITECRM_DB_NAME}"
export SUITECRM_DB_USER="${SUITECRM_DB_USER}"
export SUITECRM_DB_PASSWORD="${SUITECRM_DB_PASSWORD}"
export SUITECRM_ADMIN_USER="${SUITECRM_ADMIN_USER}"
export SUITECRM_ADMIN_PASSWORD="${SUITECRM_ADMIN_PASSWORD}"
export SUITECRM_VERSION="${SUITECRM_VERSION}"
export SUITECRM_ZIP_URL="${SUITECRM_ZIP_URL}"
export SUITECRM_ZIP_FILENAME="${SUITECRM_ZIP_FILENAME}"
export SUITECRM_INSTALL_PATH="${SUITECRM_INSTALL_PATH}"
export WEB_SERVER_USER="${WEB_SERVER_USER}"
export APP_PORT="${APP_PORT}"

log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a /var/log/suitecrm_deploy.log
}

log_message "Starting SuiteCRM software deployment via user-data script."

# --- 1. Update System & Install LAMP Stack Components ---
log_message "[SOFTWARE - 1/7] Updating system and installing LAMP stack components..."
apt update -y
apt upgrade -y

# Install Apache2
apt install -y apache2

# Install PHP 8.3 and required extensions (excluding php8.3-json as it's often built-in)
apt install -y php8.3 libapache2-mod-php8.3 php8.3-cli php8.3-common php8.3-curl php8.3-gd php8.3-intl php8.3-mbstring php8.3-mysql php8.3-soap php8.3-xml php8.3-zip php8.3-bcmath php8.3-opcache

# Install MariaDB Server and Client
apt install -y mariadb-server mariadb-client

log_message "[SOFTWARE - 1/7] LAMP stack installation complete."

# --- 2. Secure MariaDB and Create SuiteCRM Database/User (AUTOMATED) ---
log_message "[SOFTWARE - 2/7] Securing MariaDB and creating SuiteCRM database/user..."

# Automate mysql_secure_installation
# Set root password, remove anonymous users, disallow remote root login, remove test database, reload privileges
MYSQL_SECURE_SCRIPT=$(cat <<EOF_MYSQL
ALTER USER 'root'@'localhost' IDENTIFIED BY '$SUITECRM_MARIADB_ROOT_PASSWORD';
DELETE FROM mysql.user WHERE User='';
DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');
DROP DATABASE IF EXISTS test;
DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';
FLUSH PRIVILEGES;
EOF_MYSQL
)
echo "$MYSQL_SECURE_SCRIPT" | mariadb -u root

# Create SuiteCRM database and user
MYSQL_DB_SCRIPT=$(cat <<EOF_DB
CREATE DATABASE $SUITECRM_DB_NAME CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
CREATE USER '$SUITECRM_DB_USER'@'localhost' IDENTIFIED BY '$SUITECRM_DB_PASSWORD';
GRANT ALL PRIVILEGES ON $SUITECRM_DB_NAME.* TO '$SUITECRM_DB_USER'@'localhost';
FLUSH PRIVILEGES;
EOF_DB
)
echo "$MYSQL_DB_SCRIPT" | mariadb -u root -p"$SUITECRM_MARIADB_ROOT_PASSWORD"

log_message "[SOFTWARE - 2/7] MariaDB setup complete for SuiteCRM."

# --- 3. Download and Extract SuiteCRM ---
log_message "[SOFTWARE - 3/7] Downloading and extracting SuiteCRM..."

mkdir -p "$SUITECRM_INSTALL_PATH"
cd "$SUITECRM_INSTALL_PATH" || { log_message "ERROR: Failed to change directory to $SUITECRM_INSTALL_PATH"; exit 1; }

log_message "Downloading $SUITECRM_ZIP_FILENAME from $SUITECRM_ZIP_URL..."
wget "$SUITECRM_ZIP_URL" -O "$SUITECRM_ZIP_FILENAME"
if [ $? -ne 0 ]; then
    log_message "ERROR: Failed to download SuiteCRM from $SUITECRM_ZIP_URL. Check internet connectivity."
    exit 1
fi

log_message "Extracting $SUITECRM_ZIP_FILENAME..."
apt install -y unzip # Ensure unzip is installed
unzip "$SUITECRM_ZIP_FILENAME" -d "$SUITECRM_INSTALL_PATH"

# Adjust extraction path if unzip creates an extra directory layer like "SuiteCRM-8.8.0"
if [ -d "$SUITECRM_INSTALL_PATH/SuiteCRM-${SUITECRM_VERSION}" ]; then
    log_message "Adjusting extracted directory structure: Moving contents from SuiteCRM-${SUITECRM_VERSION}..."
    mv "$SUITECRM_INSTALL_PATH/SuiteCRM-${SUITECRM_VERSION}"/* "$SUITECRM_INSTALL_PATH"/
    rm -r "$SUITECRM_INSTALL_PATH/SuiteCRM-${SUITECRM_VERSION}"
fi

rm "$SUITECRM_ZIP_FILENAME" # Clean up the downloaded zip file

chown -R "$WEB_SERVER_USER":"$WEB_SERVER_USER" "$SUITECRM_INSTALL_PATH"

log_message "[SOFTWARE - 3/7] SuiteCRM download and extraction complete."

# --- 4. Configure Apache for SuiteCRM ---
log_message "[SOFTWARE - 4/7] Configuring Apache..."

# Disable default site and remove old index.html
a2dissite 000-default.conf 2>/dev/null || true
rm /var/www/html/index.html 2>/dev/null || true # Remove any placeholder from user-data
rm /var/www/html/info.php 2>/dev/null || true # Remove any lingering phpinfo file

# Extract just the hostname part from ALB_DNS_NAME for ServerName
ALB_HOSTNAME=$(echo "$SUITECRM_ALB_DNS_NAME" | sed -e 's/^https\?:\/\///')

# Create Apache Virtual Host configuration
log_message "Creating Apache Virtual Host configuration for SuiteCRM..."
tee /etc/apache2/sites-available/suitecrm.conf > /dev/null <<EOF_APACHE
<VirtualHost *:$APP_PORT>
    ServerAdmin webmaster@localhost
    ServerName $ALB_HOSTNAME
    DocumentRoot $SUITECRM_INSTALL_PATH/public

    <Directory $SUITECRM_INSTALL_PATH/public>
        Options Indexes FollowSymLinks
        AllowOverride All
        Require all granted
    </Directory>

    ErrorLog \${APACHE_LOG_DIR}/error.log
    CustomLog \${APACHE_LOG_DIR}/access.log combined
</VirtualHost>
EOF_APACHE

# Enable SuiteCRM site and rewrite module
log_message "Enabling SuiteCRM Apache site and rewrite module..."
a2ensite suitecrm.conf
a2enmod rewrite

# Restart Apache to apply changes
log_message "Restarting Apache..."
systemctl restart apache2

log_message "[SOFTWARE - 4/7] Apache configuration complete."

# --- 5. Run SuiteCRM CLI Installer ---
log_message "[SOFTWARE - 5/7] Running SuiteCRM CLI Installer (this may take a few minutes)..."

cd "$SUITECRM_INSTALL_PATH" || { log_message "ERROR: Failed to change directory to $SUITECRM_INSTALL_PATH"; exit 1; }

# Execute the CLI installer using the web server user
# Note: Frontend compilation is NOT done here; relies on pre-compiled assets.
sudo -u "$WEB_SERVER_USER" /usr/bin/php ./bin/console suitecrm:app:install \
-u "$SUITECRM_ADMIN_USER" \
-p "$SUITECRM_ADMIN_PASSWORD" \
-U "$SUITECRM_DB_USER" \
-P "$SUITECRM_DB_PASSWORD" \
-H "localhost" \
-N "$SUITECRM_DB_NAME" \
-S "$SUITECRM_ALB_DNS_NAME" \
-d "yes" \
--sys_check_option "true"

log_message "[SOFTWARE - 5/7] SuiteCRM CLI installation complete."

# --- 6. Set File Permissions (Post-Install) ---
log_message "[SOFTWARE - 6/7] Setting file permissions (post-install)..."

find "$SUITECRM_INSTALL_PATH" -type d -not -perm 2755 -exec chmod 2755 {} \;
find "$SUITECRM_INSTALL_PATH" -type f -not -perm 0644 -exec chmod 0644 {} \;
find "$SUITECRM_INSTALL_PATH" ! -user "$WEB_SERVER_USER" -exec chown "$WEB_SERVER_USER":"$WEB_SERVER_USER" {} \;
chmod +x "$SUITECRM_INSTALL_PATH"/bin/console

log_message "[SOFTWARE - 6/7] File permissions set."

# --- 7. Double-Check Configurations (.htaccess) ---
log_message "[SOFTWARE - 7/7] Adjusting .htaccess for RewriteBase /legacy..."

HTACCESS_FILE="$SUITECRM_INSTALL_PATH/public/legacy/.htaccess"
if [ -f "$HTACCESS_FILE" ]; then
    if ! grep -q "RewriteBase /legacy" "$HTACCESS_FILE"; then
        log_message "Adding/Correcting 'RewriteBase /legacy' in .htaccess..."
        sed -i '/RewriteBase/d' "$HTACCESS_FILE" # Remove any existing RewriteBase
        sed -i '/RewriteEngine On/aRewriteBase /legacy' "$HTACCESS_FILE" # Add correct one after RewriteEngine
    else
        log_message "'RewriteBase /legacy' already correctly set in .htaccess."
    fi
else
    log_message "WARNING: .htaccess file not found at $HTACCESS_FILE. This may cause issues if not present."
fi

# Final cache clear and restart for good measure
log_message "Final cache clear and Apache restart."
cd "$SUITECRM_INSTALL_PATH" # Ensure in correct directory for console
/usr/bin/php ./bin/console cache:clear
rm -rf public/assets/* # Crucial to remove old compiled CSS/JS bundles
rm -rf cache/prod/* cache/dev/*
systemctl restart apache2

log_message "SuiteCRM software deployment via user-data script finished."
EOF_USER_DATA

# Base64 encode the user data script
ENCODED_USER_DATA=$(echo "$USER_DATA_SCRIPT" | base64 --wrap=0)

INSTANCE_ID=$(aws ec2 run-instances \
    --image-id "$AMI_ID" \
    --instance-type "$INSTANCE_TYPE" \
    --key-name "$KEY_PAIR_NAME" \
    --subnet-id "$PRIVATE_SUBNET_ID" \
    --security-group-ids "$EC2_SG_ID" \
    --user-data "$ENCODED_USER_DATA" \
    --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=${RESOURCE_NAME_PREFIX}-instance}]" \
    --query "Instances[0].InstanceId" \
    --output text)

echo "Launched instance: $INSTANCE_ID. Waiting for it to be in 'running' state..."
aws ec2 wait instance-running --instance-ids "$INSTANCE_ID"
echo "Instance $INSTANCE_ID is now running. Software installation will proceed via user-data."
echo "--- [3/6] EC2 Instance launch complete. ---"

# --- 4. Application Load Balancer Setup ---
echo "--- [4/6] Setting up Application Load Balancer... ---"
ALB_ARN=$(aws elbv2 create-load-balancer \
    --name "${RESOURCE_NAME_PREFIX}-alb" \
    --type application \
    --subnets "$PUBLIC_SUBNET_1_ID" "$PUBLIC_SUBNET_2_ID" \
    --security-groups "$ALB_SG_ID" \
    --query "LoadBalancers[0].LoadBalancerArn" \
    --output text)
aws elbv2 create-tags --resource-arns "$ALB_ARN" --tags Key=Name,Value="${RESOURCE_NAME_PREFIX}-alb"
echo "Created Application Load Balancer: $ALB_ARN"
echo "--- [4/6] ALB setup complete. ---"

# --- 5. Target Group Setup ---
echo "--- [5/6] Setting up Target Group... ---"
TG_ARN=$(aws elbv2 create-target-group \
    --name "${RESOURCE_NAME_PREFIX}-tg" \
    --protocol HTTP \
    --port "$APP_PORT" \
    --vpc-id "$VPC_ID_TO_USE" \
    --health-check-protocol HTTP \
    --health-check-path / \
    --target-type instance \
    --query "TargetGroups[0].TargetGroupArn" --output text)
aws elbv2 create-tags --resource-arns "$TG_ARN" --tags Key=Name,Value="${RESOURCE_NAME_PREFIX}-tg"
echo "Created Target Group: $TG_ARN"

echo "Registering instance $INSTANCE_ID with the target group."
aws elbv2 register-targets --target-group-arn "$TG_ARN" --targets Id="$INSTANCE_ID"
echo "Instance $INSTANCE_ID registered with the target group."
echo "--- [5/6] Target Group setup complete. ---"

# --- 6. Listener Setup ---
echo "--- [6/6] Setting up ALB Listener... ---"
LISTENER_ARN=$(aws elbv2 create-listener \
    --load-balancer-arn "$ALB_ARN" \
    --protocol HTTP \
    --port 80 \
    --default-actions Type=forward,TargetGroupArn="$TG_ARN" \
    --query "Listeners[0].ListenerArn" \
    --output text)
aws elbv2 create-tags --resource-arns "$LISTENER_ARN" --tags Key=Name,Value="${RESOURCE_NAME_PREFIX}-http-listener"
echo "Created HTTP Listener on port 80: $LISTENER_ARN"
echo "--- [6/6] ALB Listener setup complete. ---"

# --- Final Output ---
ALB_DNS_NAME_FINAL=$(aws elbv2 describe-load-balancers --load-balancer-arns "$ALB_ARN" --query "LoadBalancers[0].DNSName" --output text)

echo ""
echo "=============================================================================="
echo " SUCCESS! Full SuiteCRM Deployment is in progress."
echo "=============================================================================="
echo ""
echo "AWS Infrastructure created with prefix: $RESOURCE_NAME_PREFIX"
echo "VPC ID: $VPC_ID_TO_USE"
echo "EC2 Instance ID: $INSTANCE_ID"
echo "ALB DNS Name: http://$ALB_DNS_NAME_FINAL"
echo ""
echo "SuiteCRM software installation is running in the background via EC2 user-data."
echo "This will take approximately 5-10 more minutes."
echo "You can monitor progress by SSHing into the EC2 instance and tailing the log:"
echo "  ssh -i $KEY_PAIR_NAME.pem ubuntu@<EC2_PUBLIC_IP_OR_DNS>" # Replace with actual IP/DNS
echo "  tail -f /var/log/suitecrm_deploy.log"
echo ""
echo "=============================================================================="
echo " SUITECRM CREDENTIALS (RECORD THESE SECURELY):"
echo "------------------------------------------------------------------------------"
echo "Application Access URL: $ALB_DNS_NAME_FINAL"
echo "SuiteCRM Admin Username: $SUITECRM_ADMIN_USER"
echo "SuiteCRM Admin Password: $SUITECRM_ADMIN_PASSWORD"
echo ""
echo "MariaDB Root Password: $MARIADB_ROOT_PASSWORD"
echo "SuiteCRM DB Name: $SUITECRM_DB_NAME"
echo "SuiteCRM DB User: $SUITECRM_DB_USER"
echo "SuiteCRM DB Password: $SUITECRM_DB_PASSWORD"
echo "------------------------------------------------------------------------------"
echo "=============================================================================="
